**Simple Reports:**

1. **List of Departments:**
   - Query to list all departments with their respective IDs and names.

SELECT id, name FROM department;

2. **Employee Count per Department:**
   - Query to count the number of employees in each department.

SELECT d.id, d.name, COUNT(e.id) AS employee_count
FROM department d
         LEFT JOIN employee e ON d.id = e.department_id
GROUP BY d.id, d.name;

3. **List of Projects:**
   - Query to list all projects with their respective IDs, names, and department associations.

SELECT
    p.id AS project_id,
    p.name AS project_name,
    d.id AS department_id,
    d.name AS department_name
FROM
    project p
LEFT JOIN
    department d ON p.department_id = d.id
ORDER BY
    p.id;

4. **Employees in a Specific Department:**
   - Query to retrieve the names and IDs of all employees in a specific department (e.g., HR, IT, etc.).

SELECT e.id AS employee_id,e.name AS employee_name
FROM employee e
    INNER JOIN department d ON e.department_id=d.id
WHERE d.name='Digital Marketing'

5. **List of Employees by Project:**
   - Query to list all employees working on a specific project.

SELECT e.id, e.name
FROM employee e
         JOIN project p ON e.id = p.employee_id
WHERE p.id = 1;

6. **Employee Details:**
   - Query to retrieve all details (e.g., name, job title, department) of a specific employee based on their ID or name.

SELECT id, name, email, department_id
FROM Employee
WHERE id = 2;

7. **List of Projects in Each Department:**
   - Query to list the projects associated with each department.

SELECT d.name AS department_name, p.name AS project_name
FROM department d
         JOIN project p ON d.id = p.department_id;

8. **Departments with No Employees:**
   - Query to find departments that currently have no employees.

SELECT d.id, d.name
FROM department d
LEFT JOIN employee e ON d.id = e.department_id
WHERE e.id IS NULL;

**Complicated Reports:**

1. **Employee Project Allocation:**
   - Query to list each employee along with the projects they are currently working on, including the project start and end dates.

SELECT e.name AS employee_name, p.name AS project_name, p.start_date AS start_date, p.end_date AS end_date
FROM employee e
         JOIN project p ON e.id = p.employee_id;
ORDER BY e.name,p.start_date;

2. **Project Allocation per Department:**
   - Query to find out how many projects are managed by each department and how many employees are working on each project.

SELECT d.name AS department_name, COUNT(p.id) AS project_count, COUNT(e.id) AS employee_count
FROM department d
         INNER JOIN project p ON d.id = p.department_id
         LEFT JOIN employee e ON d.id = e.department_id
GROUP BY d.name;

3. **Employees Working on Multiple Projects:**
   - Query to list employees who are working on more than one project, including the names of these projects.

SELECT e.id, e.name, GROUP_CONCAT(p.name) AS projects
FROM employee e
         JOIN project p ON e.id = p.employee_id
GROUP BY e.id, e.name
HAVING COUNT(p.id) > 1;

4. **Departmental Employee Turnover:**
   - Query to calculate the employee turnover rate per department by comparing the number of employees at the start and end of a specified period.

SELECT d.name AS department_name,
       COUNT(DISTINCT e.id) AS employees_with_projects_ending_before,
       COUNT(DISTINCT CASE
                          WHEN p.end_date < '2024-01-01' THEN e.id
                          ELSE NULL
           END) AS turnover_before_start_of_period
FROM department d
         LEFT JOIN employee e ON d.id = e.department_id
         LEFT JOIN project p ON e.id = p.employee_id
GROUP BY d.name;

5. **Project Progress Report:**
   - Query to generate a report showing the progress of each project, including the number of tasks completed, employees involved, and estimated completion date.

SELECT
    p.id AS project_id,
    p.name AS project_name,
    d.name AS department_name,
    COUNT(e.id) AS employees_involved,
    p.start_date,
    p.end_date,
    CASE
        WHEN p.end_date < CURDATE() AND p.status != 'COMPLETED' THEN 'DELAYED'
        WHEN p.status = 'COMPLETED' THEN 'COMPLETED'
        WHEN p.start_date <= CURDATE() AND p.end_date >= CURDATE() THEN 'IN PROGRESS'
        ELSE 'NOT STARTED'
        END AS project_status
FROM
    project p
        LEFT JOIN
    employee e ON p.employee_id = e.id
        LEFT JOIN
    department d ON p.department_id = d.id
GROUP BY
    p.id, p.name, d.name, p.start_date, p.end_date, p.status
ORDER BY
    p.end_date ASC;

6. **Employee Tenure in Projects:**
   - Query to calculate the average tenure of employees in each project, with a breakdown of tenure by department.

SELECT e.name AS employee_name,
       p.name AS project_name,
       DATEDIFF(CURRENT_DATE, p.start_date) AS tenure_days
FROM employee e
         JOIN project p ON e.id = p.employee_id;

7. **Top Performing Departments:**
   - Query to rank departments based on the number of successfully completed projects and the average duration of project completion.

SELECT
    d.id AS department_id,
    d.name AS department_name,
    COUNT(p.id) AS completed_projects_count,
    AVG(DATEDIFF(p.end_date, p.start_date)) AS avg_completion_duration
FROM
    department d
        LEFT JOIN
    project p ON d.id = p.department_id
WHERE
    p.status = 'COMPLETED'
GROUP BY
    d.id, d.name
ORDER BY
    completed_projects_count DESC, avg_completion_duration ASC;

8. **Employee Cross-Department Collaboration:**
   - Query to list employees who have worked on projects across different departments, including the details of these projects and departments.

SELECT
    e.id AS employee_id,
    e.name AS employee_name,
    GROUP_CONCAT(DISTINCT d.name ORDER BY d.name ASC SEPARATOR ', ') AS departments_involved,
    GROUP_CONCAT(CONCAT(p.name, ' (', d.name, ')') ORDER BY p.start_date DESC SEPARATOR '; ') AS project_details
FROM
    employee e
        JOIN project p ON e.id = p.employee_id
        JOIN department d ON p.department_id = d.id
GROUP BY
    e.id, e.name
HAVING
    COUNT(DISTINCT d.id) > 1
ORDER BY
    e.name;


9. **Departmental Budget vs. Project Costs:**
   - Query to compare the budget allocated to each department with the actual costs incurred on projects managed by that department.


10. **Employee Performance Analysis:**
    - Query to analyze the performance of employees based on the number of projects they have completed, their role in each project, and feedback scores if available.

  SELECT
    e.id AS employee_id,
    e.name AS employee_name,
    COUNT(p.id) AS completed_projects_count
FROM
    employee e
JOIN
    project p ON e.id = p.employee_id
WHERE
    p.status = 'COMPLETED'  -- Assuming 'status' indicates whether the project is completed
GROUP BY
    e.id, e.name
ORDER BY
    completed_projects_count DESC;

11. **Departments with the Most Active Projects:**
    - Query to find out which departments are currently handling the most active projects, along with details about these projects.

SELECT
    d.id AS department_id,
    d.name AS department_name,
    COUNT(p.id) AS active_projects_count,
    GROUP_CONCAT(CONCAT(p.name, ' (', p.start_date, ' to ', p.end_date, ')') SEPARATOR '; ') AS project_details
FROM
    department d
        JOIN project p ON d.id = p.department_id
WHERE
    p.start_date <= CURDATE()
  AND (p.end_date IS NULL OR p.end_date > CURDATE())
GROUP BY
    d.id, d.name
ORDER BY
    active_projects_count DESC;

12. **Overlapping Project Allocations:**
    - Query to identify employees who are allocated to projects that have overlapping timelines, potentially indicating over-scheduling.

SELECT
    p1.employee_id AS employee_id,
    e.name AS employee_name,
    p1.name AS project1_name,
    p2.name AS project2_name,
    p1.start_date AS p1_start_date,
    p1.end_date AS p1_end_date,
    p2.start_date AS p2_start_date,
    p2.end_date AS p2_end_date
FROM
    project p1
        JOIN project p2 ON p1.employee_id = p2.employee_id
        JOIN employee e ON p1.employee_id = e.id
WHERE
    p1.id <> p2.id
  AND p1.start_date <= p2.end_date
  AND p1.end_date >= p2.start_date
ORDER BY
    p1.employee_id, p1.start_date;

13. **Project Delays by Department:**
    - Query to identify projects that are delayed, grouped by department, with reasons for delay if available.

SELECT
    d.name AS department_name,
    p.name AS project_name,
    p.start_date,
    p.end_date,
    CASE
        WHEN p.end_date > CURDATE() THEN 'Not yet due'
        ELSE 'Delayed'
        END AS delay_status
FROM
    department d
        JOIN
    project p ON d.id = p.department_id
WHERE
    p.end_date < CURDATE()
ORDER BY
    d.name, p.end_date;


**Data Aggregation and Analytics Reports:**

1. **Historical Employee Engagement:**
   - Query to analyze the historical engagement of employees in projects over time, with trends indicating peak periods of activity.

SELECT
    e.id AS employee_id,
    e.name AS employee_name,
    YEAR(p.start_date) AS year,
    MONTH(p.start_date) AS month,
    COUNT(p.id) AS number_of_projects
FROM
    employee e
        JOIN
    project p ON e.id = p.employee_id
GROUP BY
    e.id, e.name, YEAR(p.start_date), MONTH(p.start_date)
ORDER BY
    e.id, YEAR(p.start_date), MONTH(p.start_date);

2. **Departmental Project Success Rate:**
   - Query to calculate the success rate of projects managed by each department over the last year, including project failure reasons if available.

SELECT
    d.name AS department_name,
    COUNT(p.id) AS total_projects,
    SUM(CASE WHEN p.status = 'COMPLETED' AND p.end_date <= p.start_date + INTERVAL 1 YEAR THEN 1 ELSE 0 END) AS successful_projects,
    ROUND(SUM(CASE WHEN p.status = 'COMPLETED' AND p.end_date <= p.start_date + INTERVAL 1 YEAR THEN 1 ELSE 0 END) * 100.0 / COUNT(p.id), 2) AS success_rate_percentage
FROM
    department d
        JOIN
    project p ON d.id = p.department_id
WHERE
    p.start_date >= CURDATE() - INTERVAL 1 YEAR
GROUP BY
    d.name
ORDER BY
    success_rate_percentage DESC;

3. **Employee Role Distribution in Projects:**
   - Query to analyze the distribution of roles (e.g., manager, developer, analyst) across projects within each department.

4. **Future Resource Allocation Forecast:**
   - Query to predict future resource allocation needs based on upcoming projects, employee availability, and department workloads.

SELECT
    d.id AS department_id,
    d.name AS department_name,
    p.start_date AS project_start_date,
    p.end_date AS project_end_date,
    COUNT(p.id) AS number_of_projects,
    SUM(CASE WHEN e.id IS NULL THEN 0 ELSE 1 END) AS available_employees
FROM
    department d
        LEFT JOIN
    project p ON d.id = p.department_id
        LEFT JOIN
    employee e ON e.department_id = d.id
WHERE
    p.start_date > CURDATE()
GROUP BY
    d.id, d.name, p.start_date, p.end_date
ORDER BY
    d.id, p.start_date;


